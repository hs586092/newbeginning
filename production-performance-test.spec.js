import { test, expect, chromium } from '@playwright/test';

test.describe('Production Performance - Supabase ÏµúÏ†ÅÌôî Í≤ÄÏ¶ù', () => {
  const productionUrl = 'https://newbeginning-6s7h0bmcb-hs586092s-projects.vercel.app';

  test('Mobile 3G Production - LCP Í∞úÏÑ† ÌôïÏù∏', async () => {
    const browser = await chromium.launch();
    const context = await browser.newContext({
      userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15',
      viewport: { width: 375, height: 812 },
      hasTouch: true,
      isMobile: true,
    });

    const page = await context.newPage();

    // 3G ÎÑ§Ìä∏ÏõåÌÅ¨ ÏãúÎÆ¨Î†àÏù¥ÏÖò
    const client = await page.context().newCDPSession(page);
    await client.send('Network.emulateNetworkConditions', {
      offline: false,
      downloadThroughput: 1.5 * 1024 * 1024 / 8, // 1.5 Mbps
      uploadThroughput: 750 * 1024 / 8, // 750 Kbps
      latency: 300 // 300ms
    });

    // CPU 4Î∞∞ ÎäêÎ¶¨Í≤å ÏãúÎÆ¨Î†àÏù¥ÏÖò
    await client.send('Emulation.setCPUThrottlingRate', { rate: 4 });

    console.log('üöÄ Production Mobile 3G ÌÖåÏä§Ìä∏ ÏãúÏûë...');
    const startTime = Date.now();

    try {
      await page.goto(productionUrl, {
        waitUntil: 'domcontentloaded',
        timeout: 30000
      });

      const loadTime = Date.now() - startTime;
      console.log(`üì± Production Mobile 3G Î°úÎî© ÏãúÍ∞Ñ: ${loadTime}ms`);

      // Progressive Authentication Í≤ÄÏ¶ù
      const hasStaticContent = await page.locator('h1, h2, header, nav, main').count() > 0;
      console.log(`üìÑ Ï†ïÏ†Å ÏΩòÌÖêÏ∏† Ï¶âÏãú ÌëúÏãú: ${hasStaticContent ? '‚úÖ ÏÑ±Í≥µ' : '‚ùå Ïã§Ìå®'}`);

      // Supabase Î≤àÎì§ Í≤ÄÏ¶ù
      const hasSupabaseInBundle = await page.evaluate(() => {
        const scripts = Array.from(document.querySelectorAll('script[src]'));
        const scriptContent = scripts.map(s => s.src || s.innerHTML).join(' ');
        return scriptContent.toLowerCase().includes('supabase');
      });

      console.log(`üîß Supabase Ï¥àÍ∏∞ Î≤àÎì§: ${hasSupabaseInBundle ? '‚ùå Ìè¨Ìï®Îê®' : '‚úÖ Ï†úÏô∏Îê®'}`);

      // Core Web Vitals Ï∏°Ï†ï
      const performanceMetrics = await page.evaluate(() => {
        return new Promise((resolve) => {
          let lcpValue = 0;
          let fcpValue = 0;

          // LCP Ï∏°Ï†ï
          const lcpObserver = new PerformanceObserver((list) => {
            const entries = list.getEntries();
            const lastEntry = entries[entries.length - 1];
            if (lastEntry) {
              lcpValue = Math.round(lastEntry.startTime);
            }
          });

          // FCP Ï∏°Ï†ï
          const fcpObserver = new PerformanceObserver((list) => {
            const entries = list.getEntries();
            if (entries.length > 0) {
              fcpValue = Math.round(entries[0].startTime);
            }
          });

          try {
            lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
            fcpObserver.observe({ entryTypes: ['first-contentful-paint'] });

            // 5Ï¥à ÌõÑ Í≤∞Í≥º Î∞òÌôò
            setTimeout(() => {
              lcpObserver.disconnect();
              fcpObserver.disconnect();
              resolve({
                LCP: lcpValue || performance.now(),
                FCP: fcpValue || performance.now(),
                timestamp: Date.now()
              });
            }, 5000);
          } catch (error) {
            resolve({
              LCP: performance.now(),
              FCP: performance.now(),
              error: error.message
            });
          }
        });
      });

      console.log('üìä Production Mobile 3G ÏÑ±Îä• Í≤∞Í≥º:');
      console.log(`   DOM Î°úÎî©: ${loadTime}ms`);
      console.log(`   FCP: ${performanceMetrics.FCP}ms`);
      console.log(`   LCP: ${performanceMetrics.LCP}ms`);
      console.log(`   Í∞úÏÑ† Î™©Ìëú: 6350ms ‚Üí 1000ms`);

      const previousLCP = 6350; // Ïù¥Ï†Ñ Ï∏°Ï†ïÍ∞í
      const currentLCP = performanceMetrics.LCP;
      const improvement = ((previousLCP - currentLCP) / previousLCP * 100).toFixed(1);
      const targetAchieved = currentLCP < 1000;

      if (targetAchieved) {
        console.log(`üéØ ‚úÖ Mobile LCP Î™©Ìëú Îã¨ÏÑ±! (${currentLCP}ms < 1000ms)`);
      } else if (currentLCP < previousLCP) {
        console.log(`üîÑ Í∞úÏÑ†Îê®: ${improvement}% (${previousLCP - currentLCP}ms Îã®Ï∂ï)`);
      } else {
        console.log('‚ùå Ï∂îÍ∞Ä ÏµúÏ†ÅÌôî ÌïÑÏöî');
      }

      // Bundle Î∂ÑÏÑù
      const bundleInfo = await page.evaluate(() => {
        const scripts = Array.from(document.querySelectorAll('script[src]'));
        const stylesheets = Array.from(document.querySelectorAll('link[rel="stylesheet"]'));

        return {
          scriptCount: scripts.length,
          stylesheetCount: stylesheets.length,
          hasNextJs: scripts.some(s => s.src && s.src.includes('_next')),
          hasTurbopack: document.documentElement.innerHTML.includes('turbopack')
        };
      });

      console.log(`üì¶ Î≤àÎì§ Ï†ïÎ≥¥:`);
      console.log(`   Ïä§ÌÅ¨Î¶ΩÌä∏: ${bundleInfo.scriptCount}Í∞ú`);
      console.log(`   Ïä§ÌÉÄÏùºÏãúÌä∏: ${bundleInfo.stylesheetCount}Í∞ú`);
      console.log(`   Next.js: ${bundleInfo.hasNextJs ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Turbopack: ${bundleInfo.hasTurbopack ? '‚úÖ' : '‚ùå'}`);

    } catch (error) {
      console.error('‚ùå Production ÌÖåÏä§Ìä∏ Ïã§Ìå®:', error.message);
    }

    await browser.close();
  });

  test('Production Edge API ÎèôÏûë ÌôïÏù∏', async () => {
    const browser = await chromium.launch();
    const page = await browser.newPage();

    // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠ Î™®ÎãàÌÑ∞ÎßÅ
    const requests = [];
    page.on('request', request => {
      requests.push({
        url: request.url(),
        method: request.method(),
        timestamp: Date.now()
      });
    });

    console.log('‚ö° Production Edge API ÌÖåÏä§Ìä∏...');

    try {
      await page.goto(productionUrl, {
        waitUntil: 'networkidle',
        timeout: 15000
      });

      // Edge API ÏöîÏ≤≠ Î∂ÑÏÑù
      const edgeRequests = requests.filter(req =>
        req.url.includes('/api/edge-') || req.url.includes('/api/static-')
      );

      const supabaseRequests = requests.filter(req =>
        req.url.includes('supabase.co') && !req.url.includes('/auth/')
      );

      console.log(`üìä ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠ Î∂ÑÏÑù:`);
      console.log(`   Ï†ÑÏ≤¥ ÏöîÏ≤≠: ${requests.length}Í∞ú`);
      console.log(`   Edge API: ${edgeRequests.length}Í∞ú`);
      console.log(`   Supabase ÏßÅÏ†ë: ${supabaseRequests.length}Í∞ú`);

      if (edgeRequests.length > 0) {
        console.log(`‚úÖ Edge API ÌôúÏÑ±Ìôî:`);
        edgeRequests.forEach(req => {
          const path = req.url.split('/').pop();
          console.log(`   - ${path} (${req.method})`);
        });
      }

      if (supabaseRequests.length === 0) {
        console.log(`‚úÖ Supabase ÌîÑÎ°ùÏãú ÏÑ±Í≥µ - ÏßÅÏ†ë ÏöîÏ≤≠ ÏóÜÏùå`);
      } else {
        console.log(`‚ö†Ô∏è Supabase ÏßÅÏ†ë ÏöîÏ≤≠ Î∞úÍ≤¨:`);
        supabaseRequests.forEach(req => console.log(`   - ${req.url}`));
      }

    } catch (error) {
      console.error('‚ùå Edge API ÌÖåÏä§Ìä∏ Ïã§Ìå®:', error.message);
    }

    await browser.close();
  });
});