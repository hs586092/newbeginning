const { test, expect } = require('@playwright/test');

test('완전한 사용자 여정: 회원가입 → 로그인 → 글 작성 → 로그아웃', async ({ page }) => {
  const uniqueId = Date.now().toString().slice(-6);
  const testUser = {
    username: `test${uniqueId}`,
    email: `test${uniqueId}@gmail.com`,
    password: 'password123!'
  };
  
  const testPost = {
    title: `🚀 Claude AI 자동 테스트 포스트 ${uniqueId}`,
    content: `안녕하세요! 이것은 Claude Code가 Playwright를 이용해 자동으로 작성한 테스트 글입니다.

📅 **생성 시간**: ${new Date().toLocaleString('ko-KR')}
🤖 **작성자**: Claude AI (Playwright 자동화)
🎯 **테스트 목적**: 전체 사용자 플로우 검증

✨ **확인된 기능들**:
- ✅ 회원가입 시스템
- ✅ 자동 프로필 생성
- ✅ 로그인 기능  
- ✅ 글 작성 시스템
- ✅ 메인 피드 표시
- ✅ 새로운 정보 컨텐츠 시스템

🎉 모든 시스템이 정상 작동한다면 이 글을 보실 수 있을 것입니다!

---
🤖 Generated by Claude Code + Playwright Automation`,
    category: 'community'
  };

  try {
    console.log('🚀 Claude AI 완전한 사용자 여정 테스트 시작');
    console.log('👤 테스트 계정:', testUser.username, '/', testUser.email);
    
    // ========================================
    // STEP 1: 사이트 접속
    // ========================================
    console.log('\n📍 STEP 1: 사이트 접속');
    await page.goto('https://newbeginning-seven.vercel.app/', { waitUntil: 'networkidle' });
    console.log('✅ 메인 사이트 접속 완료');
    
    // ========================================
    // STEP 2: 회원가입
    // ========================================
    console.log('\n📍 STEP 2: 회원가입');
    
    // 로그인 버튼 클릭
    await page.click('a[href="/login"], button:has-text("로그인")');
    console.log('✅ 로그인 페이지 이동');
    
    // 회원가입 탭 클릭
    await page.click('button:has-text("회원가입")');
    console.log('✅ 회원가입 탭 선택');
    
    // 폼 작성
    await page.fill('input[name="username"]', testUser.username);
    await page.fill('input[name="email"]', testUser.email);
    await page.fill('input[name="password"]', testUser.password);
    console.log('✅ 회원가입 폼 작성 완료');
    
    // 회원가입 제출
    await page.click('button[type="submit"]:has-text("회원가입")');
    console.log('🔄 회원가입 제출');
    
    // 결과 대기 (성공 또는 에러 메시지)
    await page.waitForTimeout(3000);
    
    // 에러 메시지 확인
    const signupError = await page.locator('.text-red-500').textContent();
    if (signupError) {
      console.log('❌ 회원가입 에러:', signupError);
      throw new Error(`회원가입 실패: ${signupError}`);
    }
    
    // 성공 메시지 확인
    const signupSuccess = await page.locator('text=회원가입이 완료되었습니다').count();
    if (signupSuccess > 0) {
      console.log('✅ 회원가입 성공!');
    }
    
    // ========================================
    // STEP 3: 로그인
    // ========================================
    console.log('\n📍 STEP 3: 로그인');
    
    // 로그인 탭으로 전환
    await page.click('button:has-text("로그인")');
    await page.waitForTimeout(1000);
    console.log('✅ 로그인 탭 선택');
    
    // 로그인 폼 작성
    await page.fill('input[name="email"]', testUser.email);
    await page.fill('input[name="password"]', testUser.password);
    console.log('✅ 로그인 폼 작성');
    
    // 로그인 제출
    await page.click('button[type="submit"]:has-text("로그인")');
    console.log('🔄 로그인 시도');
    
    // 로그인 결과 확인 (성공 시 메인으로 리다이렉트, 실패 시 에러 메시지)
    await page.waitForTimeout(5000);
    
    const loginError = await page.locator('.text-red-500').textContent();
    if (loginError) {
      console.log('❌ 로그인 실패:', loginError);
      console.log('🔍 현재 URL:', page.url());
      
      // 로그인 실패 스크린샷
      await page.screenshot({ path: 'login-failed.png', fullPage: true });
      throw new Error(`로그인 실패: ${loginError}`);
    }
    
    // 메인 페이지 도달 확인
    const currentUrl = page.url();
    if (currentUrl === 'https://newbeginning-seven.vercel.app/' || currentUrl.includes('newbeginning-seven.vercel.app')) {
      console.log('✅ 로그인 성공! 메인 페이지로 리다이렉트됨');
      console.log('🔗 현재 URL:', currentUrl);
    }
    
    // 로그인 상태 확인 (글쓰기 버튼 또는 사용자명 확인)
    const isLoggedIn = await page.locator('text=글쓰기, a[href="/write"]').count() > 0 ||
                       await page.locator(`text=${testUser.username}`).count() > 0;
    
    if (isLoggedIn) {
      console.log('✅ 로그인 상태 확인됨');
    } else {
      console.log('⚠️ 로그인 상태 확인 불가');
    }
    
    // ========================================
    // STEP 4: 글 작성
    // ========================================
    console.log('\n📍 STEP 4: 글 작성');
    
    // 글쓰기 페이지로 이동
    await page.goto('https://newbeginning-seven.vercel.app/write');
    console.log('✅ 글쓰기 페이지 이동');
    
    // 글쓰기 폼 대기 및 확인
    try {
      await page.waitForSelector('input[name="title"]', { timeout: 10000 });
      console.log('✅ 글쓰기 폼 로드됨');
    } catch (e) {
      console.log('❌ 글쓰기 폼 로드 실패 - 로그인되지 않았을 가능성');
      await page.screenshot({ path: 'write-page-error.png' });
      throw new Error('글쓰기 페이지 접근 실패');
    }
    
    // 글 작성
    await page.fill('input[name="title"]', testPost.title);
    await page.fill('textarea[name="content"]', testPost.content);
    console.log('✅ 글 내용 작성 완료');
    
    // 카테고리 선택
    const categorySelect = await page.locator('select[name="category"]').first();
    if (await categorySelect.count() > 0) {
      await categorySelect.selectOption(testPost.category);
      console.log('✅ 카테고리 선택:', testPost.category);
    }
    
    // 글 발행
    await page.click('button[type="submit"]');
    console.log('🔄 글 발행 버튼 클릭');
    
    // 발행 결과 확인
    await page.waitForTimeout(5000);
    const postUrl = page.url();
    console.log('📍 글 발행 후 URL:', postUrl);
    
    if (postUrl.includes('/post/')) {
      console.log('✅ 글 발행 성공! 상세 페이지로 이동됨');
      
      // 글 제목 확인
      const postTitle = await page.locator('h1, h2, h3').first();
      if (await postTitle.count() > 0) {
        const title = await postTitle.textContent();
        console.log('📝 발행된 글 제목:', title);
      }
    }
    
    // ========================================
    // STEP 5: 메인 피드에서 글 확인
    // ========================================
    console.log('\n📍 STEP 5: 메인 피드에서 글 확인');
    
    await page.goto('https://newbeginning-seven.vercel.app/');
    await page.waitForTimeout(3000);
    
    const myPostInFeed = await page.locator(`text=${testPost.title}`).count();
    if (myPostInFeed > 0) {
      console.log('✅ 메인 피드에서 작성한 글 확인됨!');
    } else {
      console.log('⚠️ 메인 피드에서 글을 찾을 수 없음 (페이지네이션 등의 이유일 수 있음)');
    }
    
    // ========================================
    // STEP 6: 로그아웃
    // ========================================
    console.log('\n📍 STEP 6: 로그아웃');
    
    // 사용자 메뉴 찾기 및 클릭
    try {
      const userMenu = await page.locator('button:has-text("' + testUser.username + '"), [class*="group"] button').first();
      if (await userMenu.count() > 0) {
        await userMenu.hover(); // 드롭다운 메뉴 열기
        await page.waitForTimeout(1000);
        
        // 로그아웃 버튼 클릭
        await page.click('button:has-text("로그아웃"), text=로그아웃');
        console.log('✅ 로그아웃 버튼 클릭');
        
        await page.waitForTimeout(3000);
        
        // 로그아웃 후 상태 확인
        const loggedOut = await page.locator('text=로그인, a[href="/login"]').count() > 0;
        if (loggedOut) {
          console.log('✅ 로그아웃 성공! 로그인 버튼 다시 나타남');
        }
      } else {
        console.log('❌ 사용자 메뉴를 찾을 수 없음');
      }
    } catch (logoutError) {
      console.log('⚠️ 로그아웃 과정에서 문제:', logoutError.message);
    }
    
    // ========================================
    // FINAL: 테스트 완료 및 결과 정리
    // ========================================
    console.log('\n🎯 FINAL RESULTS:');
    console.log('=======================================');
    console.log(`✅ 테스트 계정: ${testUser.username}`);
    console.log(`✅ 테스트 글: "${testPost.title}"`);
    console.log('✅ 회원가입 → 로그인 → 글 작성 → 로그아웃 완료');
    console.log('=======================================');
    
    // 최종 스크린샷
    await page.screenshot({ path: 'complete-user-journey-final.png', fullPage: true });
    console.log('📸 최종 테스트 스크린샷 저장됨');
    
  } catch (error) {
    console.log('\n💥 테스트 실패!');
    console.log('=======================================');
    console.log('❌ 실패 단계:', error.message);
    console.log('📍 실패 시점 URL:', page.url());
    console.log('=======================================');
    
    // 에러 상황 스크린샷
    try {
      await page.screenshot({ path: 'user-journey-failure.png', fullPage: true });
      console.log('📸 실패 상황 스크린샷 저장됨');
    } catch (e) {
      console.log('📸 스크린샷 저장 실패');
    }
    
    // 페이지 내 에러 메시지들 수집
    try {
      const allErrors = await page.locator('.text-red-500, [class*="error"], .error').allTextContents();
      if (allErrors.length > 0) {
        console.log('🔍 페이지 내 에러 메시지들:');
        allErrors.forEach((msg, idx) => {
          console.log(`   ${idx + 1}. ${msg}`);
        });
      }
    } catch (e) {
      console.log('에러 메시지 수집 실패');
    }
    
    throw error;
  }
});